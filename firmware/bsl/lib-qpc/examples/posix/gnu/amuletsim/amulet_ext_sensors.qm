<?xml version="1.0" encoding="UTF-8"?>
<model version="2.3.2">
 <framework name="qpc"/>
 <package name="Events" stereotype="0x01">
  <class name="ExternalSensorsEvt" superclass="qpc::QEvt">
   <attribute name="sensor_id" type="uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="data" type="uint8_t *" visibility="0x00" properties="0x00"/>
   <attribute name="length" type="uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="sensor_type" type="uint8_t" visibility="0x00" properties="0x00"/>
  </class>
  <class name="ExternalSensorsRequestEvt" superclass="qpc::QEvt">
   <attribute name="device_id" type="uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="expiration" type="uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="window_size" type="uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="window_interval" type="uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="caller_id" type="uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="sensor_type" type="uint8_t" visibility="0x00" properties="0x00"/>
  </class>
 </package>
 <package name="AOs" stereotype="0x02">
  <class name="AmuletExternalSensors" superclass="qpc::QActive">
   <statechart>
    <initial target="../1">
     <initial_glyph conn="28,6,5,0,16,10">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="ExternalSensorsEnabled">
     <tran trig="FIND_SENSOR" target="..">
      <action>AmuletNetworkEvt *findDeviceIPCMessageEvt;
uint8_t * messageParameters = malloc(1);

//params
//sensor_type
messageParameters[0] = Q_EVT_CAST(ExternalSensorsRequestEvt)-&gt;sensor_type;

findDeviceIPCMessageEvt = Q_NEW(AmuletNetworkEvt, ADD_MESSAGE_TO_QUEUE_SIG);
findDeviceIPCMessageEvt-&gt;messageID = 550; //TODO:this needs to generated by the network manager
findDeviceIPCMessageEvt-&gt;majorType = IPC_REQUEST;
findDeviceIPCMessageEvt-&gt;minorType = FIND_SENSOR;
findDeviceIPCMessageEvt-&gt;targetID = EXT_SENSOR_MAN_M0;
findDeviceIPCMessageEvt-&gt;params = messageParameters;
findDeviceIPCMessageEvt-&gt;nparams = 1;
QACTIVE_POST(AO_AmuletNetwork, &amp;findDeviceIPCMessageEvt-&gt;super, NULL);</action>
      <tran_glyph conn="23,22,3,1,43,2,-2">
       <action box="0,-2,30,4"/>
      </tran_glyph>
     </tran>
     <tran trig="SUBSCRIBE_EXT_SENSOR" target="..">
      <action>AmuletNetworkEvt *subscribeIPCMessageEvt;
uint8_t * subscriptionParameters = malloc(8);

//params
//device_id, expiration, window_size, window_interval, caller_id
//1+4+1+1+1
//e.g.:
//HRM, 0x0000, 0x0001,0x0001,0x01
subscriptionParameters[0] = Q_EVT_CAST(ExternalSensorsRequestEvt)-&gt;device_id;
subscriptionParameters[1] = (uint8_t) Q_EVT_CAST(ExternalSensorsRequestEvt)-&gt;expiration; //exp
subscriptionParameters[2] = (uint8_t) (Q_EVT_CAST(ExternalSensorsRequestEvt)-&gt;expiration) &gt;&gt; 8; //exp
subscriptionParameters[3] = (uint8_t) Q_EVT_CAST(ExternalSensorsRequestEvt)-&gt;window_size; 
subscriptionParameters[4] = (uint8_t) (Q_EVT_CAST(ExternalSensorsRequestEvt)-&gt;window_size) &gt;&gt; 8; 
subscriptionParameters[5] = (uint8_t) Q_EVT_CAST(ExternalSensorsRequestEvt)-&gt;window_interval; 
subscriptionParameters[6] = (uint8_t) (Q_EVT_CAST(ExternalSensorsRequestEvt)-&gt;window_interval) &gt;&gt; 8;
subscriptionParameters[7] = Q_EVT_CAST(ExternalSensorsRequestEvt)-&gt;caller_id;  


subscribeIPCMessageEvt = Q_NEW(AmuletNetworkEvt, ADD_MESSAGE_TO_QUEUE_SIG);
subscribeIPCMessageEvt-&gt;messageID = 500; //TODO:this needs to generated by the network manager
subscribeIPCMessageEvt-&gt;majorType = IPC_REQUEST;
subscribeIPCMessageEvt-&gt;minorType = SUBSCRIBE_EXTERNAL_SENSOR;
subscribeIPCMessageEvt-&gt;targetID = EXT_SENSOR_MAN_M0;
subscribeIPCMessageEvt-&gt;params = subscriptionParameters;
subscribeIPCMessageEvt-&gt;nparams = 8;
QACTIVE_POST(AO_AmuletNetwork, &amp;subscribeIPCMessageEvt-&gt;super, NULL);</action>
      <tran_glyph conn="23,26,3,1,43,2,-2">
       <action box="0,-2,31,6"/>
      </tran_glyph>
     </tran>
     <state_glyph node="23,16,41,30"/>
    </state>
    <state_diagram size="80,85"/>
   </statechart>
  </class>
  <attribute name="AO_AmuletExternalSensors" type="QActive * const" visibility="0x00" properties="0x00"/>
  <operation name="AmuletExternalSensors_ctor" type="void" visibility="0x00" properties="0x00">
   <code>AmuletExternalSensors *me = (AmuletExternalSensors *)AO_AmuletExternalSensors;
QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;AmuletExternalSensors_initial);
</code>
  </operation>
 </package>
 <directory name=".">
  <file name="amulet_ext_sensors.c">
   <text>#include &lt;stdlib.h&gt;


#include &quot;amulet_ext_sensors.h&quot;


/* Active object class -----------------------------------------------------*/
$declare(AOs::AmuletExternalSensors)


//void QF_onClockTick(void) {
//    QF_TICK((void *)0);
//}


/* Local objects -----------------------------------------------------------*/
static AmuletExternalSensors l_amulet_ext_sensors; /* the single instance of the AmuletExternalSensors active object */


/* Global-scope objects ----------------------------------------------------*/
QActive * const AO_AmuletExternalSensors = &amp;l_amulet_ext_sensors.super; /* &quot;opaque&quot; AO pointer */

$define(AOs::AmuletExternalSensors_ctor)

$define(AOs::AmuletExternalSensors)</text>
  </file>
  <file name="amulet_ext_sensors.h">
   <text>#ifndef amulet_ext_sensors_h
#define amulet_ext_sensors_h

#include &quot;qp_port.h&quot;
#include &quot;amulet.h&quot;
#include &quot;amulet_api.h&quot;


enum AmuletExternalSensorsSignals {
    FIND_SENSOR_SIG = Q_USER_SIG,
    SUBSCRIBE_EXT_SENSOR_SIG,
    EXT_DEVICE_DATA_SIG
};

//enum SensorSignals {
 //   BUTTON_A_PRESSED_SIG = Q_USER_SIG + 5,
  //  BUTTON_B_PRESSED_SIG
//};

$declare(Events::ExternalSensorsEvt)
$declare(Events::ExternalSensorsRequestEvt)

$declare(AOs::AmuletExternalSensors_ctor)
$declare(AOs::AO_AmuletExternalSensors)

#endif                    /* amulet_ext_sensors_h */</text>
  </file>
 </directory>
</model>

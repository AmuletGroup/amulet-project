<!--

Copyright 2016 by the Trustees of Dartmouth College and Clemson University, 
and distributed under the terms of the "Dartmouth College Non-Exclusive Research
Use Source Code License Agreement" (for NON-COMMERCIAL research purposes only),
as detailed in a file named LICENSE.pdf within this repository.

-->
<?xml version="1.0" encoding="UTF-8"?>
<model version="3.3.0">
 <framework name="qpc"/>
 <package name="AOs" stereotype="0x02">
  <class name="FallDetection" superclass="qpc::QActive">
   <attribute name="aftermath_counter" type="uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="still_counter" type="uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="no_still_counter" type="uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="need_clear" type="uint8_t" visibility="0x00" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <action>aftermath_counter=0;
still_counter=0;
no_still_counter=0;
need_clear = 1;
AmuletSubscribeInternalSensor(ACCELEROMETER, 0, 5, 10000);

char msg_data[19] = &quot;Prob Estimation:&quot;;
AmuletRegularCenteredText(45, msg_data);
AmuletPushChangesToDisplay();</action>
     <initial_glyph conn="8,2,5,0,30,6">
      <action box="2,-2,37,7"/>
     </initial_glyph>
    </initial>
    <state name="Monitoring">
     <entry>aftermath_counter=0;
still_counter=0;
no_still_counter=0;
if(need_clear==1){
    char msg_data[12] = &quot;Monitoring&quot;;
    AmuletClearRect(0,31,LCD_HORIZONTAL_MAX,REGULAR_FONT_SIZE);
    AmuletRegularCenteredText(31, msg_data);
    AmuletClearRect(0,91,LCD_HORIZONTAL_MAX,REGULAR_FONT_SIZE);
    AmuletClearRect(0,65,LCD_HORIZONTAL_MAX,20);
    AmuletDrawFastHLine(0, 65, 128);
    AmuletDrawFastHLine(0, 85, 128);
    AmuletDrawFastVLine(25,65,20);
    AmuletDrawFastVLine(51,65,20);
    AmuletDrawFastVLine(76,65,20);
    AmuletDrawFastVLine(102,65,20);
    need_clear = 0;
    AmuletPushChangesToDisplay();
}
</entry>
     <tran trig="AMULET_DEVICE_DATA_XL" target="../../6">
      <tran_glyph conn="50,16,1,3,20">
       <action box="1,-2,11,3"/>
      </tran_glyph>
     </tran>
     <tran trig="FALLLAND" target="../../2">
      <action>aftermath_counter=1;</action>
      <tran_glyph conn="50,22,1,0,3,14">
       <action box="1,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="FALLONLY" target="../../3">
      <tran_glyph conn="37,25,2,0,2,-9,9">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="29,8,21,17">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="Possible">
     <entry>need_clear = 1;
uint8_t text_height = AmuletTextHeight();
AmuletClearRect(0,91,LCD_HORIZONTAL_MAX,text_height+3);

char msg_data[12] = &quot;Detect Hit&quot;;
AmuletRegularCenteredText(91, msg_data);
AmuletFillRect(0,65,51,20);
AmuletPushChangesToDisplay();</entry>
     <tran trig="POSSIBLETIMEOUT" target="../../4">
      <action>uint8_t text_height = AmuletTextHeight();
AmuletClearRect(0,91,LCD_HORIZONTAL_MAX,text_height+3);
char msg_data[16] = &quot;Count stillness&quot;;
AmuletRegularCenteredText(91, msg_data);
AmuletFillRect(0,65,76,20);
AmuletPushChangesToDisplay();</action>
      <tran_glyph conn="61,40,1,2,11,-3,12,-16">
       <action box="11,-6,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="AMULET_DEVICE_DATA_XL" target="..">
      <action>aftermath_counter++;
if(aftermath_counter&gt;=2){
    AmuletStateTransition(POSSIBLETIMEOUT_SIG);
}</action>
      <tran_glyph conn="61,41,1,2,2,3,-10,-2">
       <action box="-12,3,11,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="46,36,15,6">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <state name="WaitShock">
     <entry>need_clear = 1;
uint8_t text_height = AmuletTextHeight();
AmuletClearRect(0,91,LCD_HORIZONTAL_MAX,text_height+3);

char msg_data[12] = &quot;Detect Fall&quot;;
AmuletRegularCenteredText(91, msg_data);
AmuletFillRect(0,65,25,20);
AmuletPushChangesToDisplay();</entry>
     <tran trig="LANDONLY" target="../../2">
      <tran_glyph conn="35,40,1,3,11">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <tran trig="RESUMEMONITOR" target="../../1">
      <tran_glyph conn="20,41,3,3,-2,-18,11">
       <action box="0,-14,14,2"/>
      </tran_glyph>
     </tran>
     <tran trig="AMULET_DEVICE_DATA_XL" target="../../7">
      <tran_glyph conn="35,41,1,0,2,3,-4,13">
       <action box="-5,4,10,3"/>
      </tran_glyph>
     </tran>
     <state_glyph node="20,36,15,6">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="StillCounter">
     <tran trig="RESUMEMONITOR" target="../../1">
      <action>aftermath_counter=0;
still_counter=0;
no_still_counter=0;</action>
      <tran_glyph conn="80,15,0,1,-4,-30">
       <action box="-13,-5,13,2"/>
      </tran_glyph>
     </tran>
     <tran trig="AMULET_DEVICE_DATA_XL" target="../../8">
      <tran_glyph conn="91,19,1,3,2,8,2,1,2">
       <action box="-7,4,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="KEEPSTILL" target="../../5">
      <tran_glyph conn="91,18,1,1,20,23,-19">
       <action box="-6,-6,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="78,15,13,6"/>
    </state>
    <state name="FallConfirm">
     <entry>char msg_data[12] = &quot;FALL&quot;;
AmuletBoldCenteredText(13, msg_data);
AmuletPushChangesToDisplay();</entry>
     <tran trig="AMULET_BUTTON_TAP" target="../../1">
      <tran_glyph conn="79,47,3,2,-9,14,-29,-36">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="79,38,13,17">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <state name="Compute">
     <entry>uint8_t fall=0;
uint8_t land=0;
uint8_t fall_idx=0;

//char msg_data[12] = &quot;Monitoring&quot;;
//AmuletRegularCenteredText(31, msg_data);
//AmuletPushChangesToDisplay();

for(uint8_t i = 0; i &lt; 20; i++){
    int16_t a=AmuletGetAccelX(i);
    int16_t b=AmuletGetAccelY(i);
    int16_t c=AmuletGetAccelZ(i);

/*    #ifdef FALL_DETECTION_DEBUG
        if(i==10){
            char msg_acc_data_x[12];
            if(a&lt;0){
                a=-a;
            }
            AmuletITOA(a, msg_acc_data_x);
            AmuletDisplayMessage(msg_acc_data_x, 3);

            char msg_acc_data_y[12];
            if(b&lt;0){
                b=-b;
            }
            AmuletITOA(b, msg_acc_data_y);
            AmuletDisplayMessage(msg_acc_data_y, 4);

            char msg_acc_data_z[12];
            if(c&lt;0){
                c=-c;
            }
            AmuletITOA(c, msg_acc_data_z);
            AmuletDisplayMessage(msg_acc_data_z, 5);
        }
    #endif*/

    float axis1 = (float)a/100.0;
    float axis2 = (float)b/100.0;
    float axis3 = (float)c/100.0;

    int16_t scale = axis1*axis1+axis2*axis2+axis3*axis3;

    if(scale&lt;50 &amp;&amp; scale!=0){
        fall+=1;
        fall_idx=i;
    }
    else if(fall&gt;=1 &amp;&amp; scale&gt;200 &amp;&amp; i-fall_idx&lt;4){
        land=1;
    }
}

/*if(fall&gt;=2 &amp;&amp; land==1){
    AmuletStateTransition(FALLLAND_SIG);
} else 
if(fall&gt;=2 &amp;&amp; land==0){
    AmuletStateTransition(FALLONLY_SIG);
} else {*/
    AmuletStateTransition(BACK_TO_MONITOR_SIG);
//}
</entry>
     <tran trig="BACK_TO_MONITOR" target="../../1">
      <tran_glyph conn="73,18,2,1,1,-23">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="70,12,7,6">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="state2">
     <entry>//uint16_t tuple[3];
uint8_t fall=0;
uint8_t land=0;
uint8_t fall_idx=0;

for(uint8_t i = 0; i &lt; 20; i++){
    //GetAccelTuple(i, tuple);
    int16_t a=AmuletGetAccelX(i);
    int16_t b=AmuletGetAccelY(i);
    int16_t c=AmuletGetAccelZ(i);

    float axis1 = (float)a/100.0;
    float axis2 = (float)b/100.0;
    float axis3 = (float)c/100.0;

    //int16_t pa=axis1;
    //int16_t pb=axis2;
    //int16_t pc=axis3;

    int16_t scale = axis1*axis1+axis2*axis2+axis3*axis3;

    
    if(scale&gt;200){
//#ifdef AMULET_BOARD
//        UARTprintf(&quot;Tuple %d: (%d, %d , %d, %d)\n&quot;, i,pa,pb,pc,scale);
//#endif
        land=1;
    }

}

if(land==1){
    //SensorEvt *imuEvt;
    //imuEvt = Q_NEW(SensorEvt, FallDetection_LANDONLY_SIG);
    AmuletStateTransition(LANDONLY_SIG);
}
else{
    //SensorEvt *imuEvt;
    //imuEvt = Q_NEW(SensorEvt, FallDetection_RESUMEMONITOR_SIG);
    AmuletStateTransition(RESUMEMONITOR_SIG);

}
</entry>
     <tran trig="TRIG1" target="../../3">
      <tran_glyph conn="28,59,3,2,-5,-17">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="28,57,8,6">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="state3">
     <entry>for(uint8_t i = 0; i &lt; 20; i++){
    int16_t a=AmuletGetAccelX(i);
    int16_t b=AmuletGetAccelY(i);
    int16_t c=AmuletGetAccelZ(i);

    float axis1 = (float)a/100.0;
    float axis2 = (float)b/100.0;
    float axis3 = (float)c/100.0;

    int16_t scale = axis1*axis1+axis2*axis2+axis3*axis3;

    if(scale&gt;200 || scale&lt;50)
        no_still_counter+=1;
}

if(no_still_counter&lt;2){
    still_counter+=1;
} else {
    AmuletStateTransition(RESUMEMONITOR_SIG);
}


if(still_counter==1){
    AmuletFillRect(0,65,102,20);
    AmuletPushChangesToDisplay();
}

if(still_counter==2){
    AmuletFillRect(0,65,128,20);
    AmuletPushChangesToDisplay();
}



if(still_counter&gt;=2){
    AmuletStateTransition(KEEPSTILL_SIG);
}

AmuletStateTransition(TO_STILL_COUNTER_SIG);</entry>
     <tran trig="TO_STILL_COUNTER" target="../../4">
      <tran_glyph conn="99,31,2,2,3,-12,-13">
       <action box="0,-2,11,3"/>
      </tran_glyph>
     </tran>
     <state_glyph node="97,25,7,6">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="135,67"/>
   </statechart>
  </class>
  <attribute name="AO_FallDetection" type="QActive * const" visibility="0x00" properties="0x00"/>
  <operation name="FallDetection_ctor" type="void" visibility="0x00" properties="0x00">
   <code>FallDetection *me = (FallDetection *)AO_FallDetection;
QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;FallDetection_initial);
//QTimeEvt_ctor(&amp;me-&gt;timeEvt, REQ_CHANGE_SIG);

</code>
  </operation>
 </package>
 <directory name="./">
  <file name="fall_detection.c">
   <text>#include &lt;stdlib.h&gt;

#include &quot;amulet.h&quot;
#include &quot;fall_detection.h&quot;


#ifdef FALL_DETECTION_APP

/**
* Simple application for evaluation section
*/

/* Active object class -----------------------------------------------------*/
$declare(AOs::FallDetection)


/* Local objects -----------------------------------------------------------*/
static FallDetection l_fall_detection; /* the single instance of the Table active object */
//uint8_t aftermath_counter;
//uint8_t still_counter;
//uint8_t no_still_counter;

/* Global-scope objects ----------------------------------------------------*/
QActive * const AO_FallDetection = &amp;l_fall_detection.super; /* &quot;opaque&quot; AO pointer */

$define(AOs::FallDetection_ctor)

$define(AOs::FallDetection)

#endif //FallDetection_APP</text>
  </file>
  <file name="fall_detection.h">
   <text>#ifndef fall_detection_h
#define fall_detection_h


#include &quot;qp_port.h&quot;
#include &quot;amulet_api.h&quot;

enum FallDetectionSignals {
    FALL_SIG = Q_USER_SIG+130,
    FallDetection_RESUMEMONITOR_SIG,
    FallDetection_LANDONLY_SIG,
    FallDetection_KEEPSTILL_SIG,
    FallDetection_FALLLAND_SIG,
    FallDetection_FALLONLY_SIG,
    FallDetection_AMTIMEOUT_SIG
};

$declare(AOs::FallDetection_ctor)
$declare(AOs::AO_FallDetection)

#endif                    /* emergency_response_h */</text>
  </file>
 </directory>
</model>

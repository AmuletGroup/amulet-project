<!--

Copyright 2016 by the Trustees of Dartmouth College and Clemson University, 
and distributed under the terms of the "Dartmouth College Non-Exclusive Research
Use Source Code License Agreement" (for NON-COMMERCIAL research purposes only),
as detailed in a file named LICENSE.pdf within this repository.

-->
<?xml version="1.0" encoding="UTF-8"?>
<model version="3.3.0">
 <framework name="qpc"/>
 <package name="AOs" stereotype="0x02">
  <class name="Pedometer" superclass="qpc::QActive">
   <attribute name="negative_acc" type="uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="count" type="uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="timer_counts" type="uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="goal" type="uint32_t" visibility="0x00" properties="0x00"/>
   <attribute name="should_update" type="uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="should_init" type="uint8_t" visibility="0x00" properties="0x00"/>
   <attribute name="update_progress" type="uint8_t" visibility="0x00" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <action>negative_acc = 0;
count = 0;
goal = 100;
should_init = 1;
should_update = 1;
update_progress = 0;
AmuletSubscribeInternalSensor(ACCELEROMETER, 0, 5, 10000);


</action>
     <initial_glyph conn="8,2,5,0,29,6">
      <action box="2,-2,42,6"/>
     </initial_glyph>
    </initial>
    <state name="Monitoring">
     <entry>if(should_init==1){
    //char msg2[12] = &quot;Progress:&quot;;
    //AmuletSetFont(REGULAR_FONT);
    //AmuletCenteredText(48, msg2);
    AmuletDrawWalkerImage(10,10);
    AmuletDrawFastHLine(0, 65, 128);
    AmuletDrawFastHLine(0, 85, 128);
    AmuletPushChangesToDisplay();
    should_init = 0;
}

if(should_update==1){
    AmuletSetFont(REGULAR_FONT);
    uint8_t text_height = AmuletTextHeight();
    AmuletClearRect(70,13,LCD_HORIZONTAL_MAX,text_height+10);
    AmuletClearRect(0,48,LCD_HORIZONTAL_MAX,text_height+7);

    char count_to_display[16] = &quot;Goal:&quot;;
    //char div[2] = &quot;/&quot;;
    char goal_to_display[6];

    char count_text[6];
    AmuletITOA(count,count_text);

    AmuletITOA(goal,goal_to_display);
    //AmuletConcat(count_to_display,div);
    AmuletConcat(count_to_display,goal_to_display);
    AmuletCenteredText(48, count_to_display);

    AmuletSetFont(BOLD_FONT);
    AmuletText(70, 10, count_text);

    AmuletPushChangesToDisplay();
    should_update = 0;
}

if(update_progress){
    AmuletClearRect(0,65,LCD_HORIZONTAL_MAX,20);
    uint16_t loc = 128*count/goal; 
    AmuletFillRect(0,65,loc,20);
    AmuletPushChangesToDisplay();
    update_progress = 0;
}</entry>
     <tran trig="AMULET_DEVICE_DATA_XL" target="../../2">
      <tran_glyph conn="49,16,1,3,12,3,12">
       <action box="1,-2,21,3"/>
      </tran_glyph>
     </tran>
     <tran trig="AMULET_BUTTON_TAP" target="..">
      <action>if(goal==100){
    goal = 1000;
} else {
   goal = 100;
}
should_update = 1;
update_progress = 1;</action>
      <tran_glyph conn="49,12,1,0,18,-6,-22,2">
       <action box="1,-2,15,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="26,8,23,17">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="state1">
     <entry>//Algorithm from http://www.mathworks.com/matlabcentral/fileexchange/42821-android-sensor-data-acquisition-accelerometer-example/content/Accelerometer/StepCounter.m

for(uint8_t i = 0; i &lt; 10; i++){
    int16_t a=AmuletGetAccelX(i);
    int16_t b=AmuletGetAccelY(i);
    int16_t c=AmuletGetAccelZ(i);

    float axis1 = (float)a/100.0;
    float axis2 = (float)b/100.0;
    float axis3 = (float)c/100.0;

    int16_t scale = axis1*axis1+axis2*axis2+axis3*axis3;

    if(scale&lt;40 &amp;&amp; scale!=0){
        negative_acc = 1;
    }
    if(scale&gt;200){
        if(negative_acc==1){
            negative_acc=0;
            count++;
            should_update = 1;
        }
    }

}

if(goal==100){
    update_progress = 1;
} else if(count%10==0){
    update_progress = 1;
}

AmuletStateTransition(BACK_TO_MONITOR_SIG);


</entry>
     <tran trig="BACK_TO_MONITOR" target="../../1">
      <tran_glyph conn="79,23,2,2,4,-34,-2">
       <action box="-22,2,16,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="73,11,15,12">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="135,46"/>
   </statechart>
  </class>
  <attribute name="AO_Pedometer" type="QActive * const" visibility="0x00" properties="0x00"/>
  <operation name="Pedometer_ctor" type="void" visibility="0x00" properties="0x00">
   <code>Pedometer *me = (Pedometer *)AO_Pedometer;
QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;Pedometer_initial);
//QTimeEvt_ctor(&amp;me-&gt;timeEvt, REQ_CHANGE_SIG);

</code>
  </operation>
 </package>
 <directory name="./"/>
</model>
